
# This file describes compute kernels which are invoked for each step
# Every kernel is run for each step, in the order of appearance in this file top-to-bottom.
# Kernels must declare the name of their OpenCL source code entry function,
# which MUST be of type `void` and accept len(inputs) input attributes of vector data.

[[kernel]]
# The kernel `name` MUST match a kernel defined in the `source` field.
name = "compute_position"

# [colmap] is a dictionary with keys containing
# source arg names and values containing Data column names.
# we get type data by querying parsed source directly and convert from the original to the processing target types.
colmap.id = 'ID'
colmap.x0 = 'X0'
colmap.y0 = 'Y0'

# Constants is a list of keys -> value data.
#   1st element is Name of the variable; this is only used for diagnostic & reporting reasons
#   The 2nd element of the value data is a string denoting type
#   and the 3rd element is a numeric value which will be assigned to that type.
# Constant variables are NOT pointers, and get passed in as their type in the order specified here.
# for that reason, order in this list MUST MATCH ordering in your kernel's `source` function.
data_constants = [
  ['variable_name', 'float', 5.2 ],
  ['another_var',   'int64', 999 ],
]

# This string is passed verbatim to the compiler backend.
# Most users will not need these, only those chasing extreme performance will care.
# Option effects are documented at https://registry.khronos.org/OpenCL/specs/3.0-unified/html/OpenCL_API.html#compiler-options
cl_program_compiler_options = ""

source = '''
kernel void compute_position (
    global float const* id,
    global float* x0,
    global float* y0,
    float variable_name,
    long another_var
)
{
    const size_t i = get_global_id(0);
    if (i == 0) {
      x0[i] = x0[i] + 0.1;
      y0[i] = y0[i] + 0.1;
    }
    else {
      x0[i] = x0[i] - 0.1;
    }
}
'''


